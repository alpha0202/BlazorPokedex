@using BlazorPokedex.Models.Pagination;
@using Models;



<nav class="nav">
     <ul class="pagination justify-content-center">
        @foreach (var item in _paginationButtons)
        {
            <li @onclick="() => OnSelectedPage(item)" style="cursor:pointer" class="page-item @(item.Enable ? null : "disabled") @(item.Active? "active":null)">
                <span class="page-link" href="#">@item.Text</span>
            </li>

            
        }

     </ul>

</nav>

@code {
    private List<PaginationButton> _paginationButtons;

    [Parameter]
    public PaginationMetaData MetaData  { get; set; }
    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    [Parameter]
    public int Spread { get; set; }


    protected override void OnParametersSet()
    {
        CreatePaginationButtons();
    }


    private void CreatePaginationButtons()
    {
        _paginationButtons = new List<PaginationButton>();
        _paginationButtons.Add(new PaginationButton(MetaData.CurrentPage - 1, MetaData.HasPrevious, "Previous"));

        for (int i = 0; i < MetaData.TotalPages; i++)
        {
            if (i >= MetaData.CurrentPage - Spread && i <= MetaData.CurrentPage + Spread)
            {
                _paginationButtons.Add(new PaginationButton(i, true, i.ToString()) { Active = MetaData.CurrentPage == i });
            }

        }

        _paginationButtons.Add(new PaginationButton(MetaData.CurrentPage + 1, MetaData.HasNext, "Next"));

    }


    private async Task OnSelectedPage(PaginationButton button)
    {
        if (button.Page == MetaData.CurrentPage || !button.Enable)
            return;


        MetaData.CurrentPage = button.Page;
        await SelectedPage.InvokeAsync(button.Page);
    }

}
